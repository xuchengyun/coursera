// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static int bitNum;
    static int twoQY;
    static boolean flag;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        let bitNum = 16;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < bitNum) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, res, nx, ny;
        var boolean sign;

        let sign = ((x < 0) = (y < 0));

        let nx = Math.abs(x);
        let ny = Math.abs(y);
        // handle overflow
        if ((ny > nx) | (y < 0)) {
            let twoQY = 0;
            let flag = true;
            return 0;
        }
        let q = Math.divide(nx, ny + ny);
        if (~flag) {
            // track 2 * q * y from previous recursion level
            let twoQY = twoQY + y + y;
        }
        if ((nx - twoQY) < ny) {
            let res = q + q;
            let flag = true;
        } else {
            let res = q + q + 1;
            let flag = false;
        }

        if (sign) {
            return res;
        } else {
            return -res;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, newY, temp;

        let y = 0;
        let i = bitNum / 2 - 1;

        while(~(i < 0)){
            let newY = y + twoToThe[i];
            let temp = newY * newY;
            // handle overflow
            if((~(temp > x)) & (temp > 0)){
                let y = newY;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }

    /** Returns if jth bit of x is 1 */
    function boolean bit(int x, int j){
        return ~((x & twoToThe[j]) = 0);
    }

    function int twoToThe(int i){
        return twoToThe[i];
    }

}
